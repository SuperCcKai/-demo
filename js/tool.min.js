var set = {
    width: 9,
    height: 9,
    mine: 10
};
var mineArray = [];
var minewarnArray = [];
var curNotMine;
var realNotMine;
var first_step = true;
var time = 0;
var gameOver = false;
var temp;
var leftMark = 0;
/*
var realLeftMine = 0;
var visableLeftMine = 0;
*/

function initSet(type) {
    mineArray = [];
    minewarnArray = [];
    first_step = true;
    time = 0;
    gameOver = false;
    timing(false);
    switch (type) {
        case 0:
            set = {
                width: 9,
                height: 9,
                mine: 10
            };
            break;
        case 1:
            set = {
                width: 16,
                height: 16,
                mine: 40
            };
            break;
        case 2:
            set = {
                width: 30,
                height: 16,
                mine: 99
            };
            break;
        case 3:
            set = {
                width: f("width").value,
                height: f("height").value,
                mine: f("mine").value
            };
            break;
    }
    Main();
}

function Main() {
    //alert("Main!");
    var seconds = 0;
    var timer;
    mineArray = [];
    minewarnArray = [];
    leftMark = set.mine;
    initSevenSeg();
    initMain(set.width, set.height, set.mine);
    initmine(set.width, set.height, set.mine);
    retain();
    /*
    clearInterval(f('seconds').timer);
    f('seconds').timer = setInterval(function () {
        f('seconds').innerHTML = seconds + "秒";
        f('seconds').style.display = "block";
        seconds++;
    }, 1000);
    */
}

function initSevenSeg() {
    $("#mine_left").sevenSeg({
        digits: 3,
        value: leftMark
    });
    $("#time_seconds").sevenSeg({
        digits: 3,
        value: 0
    });
}

function timing(flag) {
    if(flag) {
        temp = setInterval(function() {
                    if(++time > 999) {
                        time = 0;
                        aleret("you boom!");
                        initSet(0);
                    }
                    $("#time_seconds").sevenSeg({ value: time });
                }, 1000);
    }else {
        //alert("timing_false");
        clearInterval(temp);
    }
}

function leftMarkMine(mark) {
    if(mark)
        leftMark--;
    else
        leftMark++;
    $("#mine_left").sevenSeg({ value: leftMark });
}

function retain() {
    var A = f("mine_left");
    A.style.display = "block";
    //A.innerHTML = mineArray.length
}

//根据id值返回html标签
function f(idValue) {
    var elem = document.getElementById(idValue);
    return elem;
}

function initMain(width, height, mine) {
    var table = ["<table  cellpadding='0' cellspacing='0' id='tt'>"];
    for (var i = 0; i < height; i++) {
        table.push("<tr>");
        for (var j = 0; j < width; j++) {
            var elemId = i * width + j;
            //f1: 每个格子class初始值
            table.push("<td id='" + elemId + "' class='f1' onmouseover='over(this);' onmouseout='out(this);' oncontextmenu='mark(this);' onclick='mouseclick(this);'>&nbsp;</td>")
        }
        table.push("</tr>")
    }
    table.push("</table>");
    var game = document.getElementById("game");
    game.innerHTML = table.join("");
    curNotMine = 0;
     realNotMine = width * height - mine;
}



function initmine(width, height, mine) {
    var table = [];
    var sum = width * height;
    for (var i = 0; i < sum; i++) {
        table[i] = i;
        //-1代表原始方块
        minewarnArray[i] = -1
    }
    for (var i = 0; i < mine; i++) {
        var mine_here;
        do{
            mine_here = Math.floor(Math.random() * sum);
            //alert("haha");
        }while(mineArray.has(mine_here) );
        mineArray.push(mine_here);
        //删除当前雷的编号
        //table.splice(mine_here, 1);
    }
    //alert("mineArray.length: " + mineArray.length);
    var str = "";
    for(var i=0; i<mineArray.length; i++) {
        str += mineArray[i] + " ";
    }
    //在页面显示有雷的格子的id
    //f("test").innerHTML = str;
}

Array.prototype.has = function (type) {
    var flag = false;
    for (var i = 0; i < mineArray.length; i++) {
        if (type == mineArray[i]) {
            flag = true;
            break;
        }
    }
    return flag;
};

function over(block) {
    if(!gameOver) {
        if (block.className == "f1") {
            block.className = "f2"
        }
    }
}

function out(block) {
    if(!gameOver) {
        if (block.className == "f2") {
            block.className = "f1"
        }
    }
}

function mark(block) {
    if(!gameOver  && block.className!="f4") {
        if(first_step==true) {
            timing(true);
            first_step = false;
        }
        if (block.className == "f2" || block.className == "f1") {
            if (leftMark == 0) {
                return;
            }
            leftMarkMine(true);
            block.className = "m1";
        } else {
            leftMarkMine(false);
            block.className = "f1";
        }
        var mine_left = document.getElementById("mine_left");
    }
}

function mouseclick(block) {
    if(!gameOver && block.className!="m1" && block.className!="f4") {
        if(first_step==true) {
            timing(true);
            first_step = false;
        }
        var elemId = block.id;
        if (mineArray.has(elemId)) {
            //是雷就显示所有雷
            for (var i = 0; i < mineArray.length; i++) {
                //f3: 非踩中雷
                f(mineArray[i]).className = "f3"
            }
            //f5: 踩中的雷
            f(elemId).className = "f5";
            //f(elemId).style.backgroundImage = 
            gameOver = true;
            timing(false);
        } else {
            //f4: 不是雷
            block.className = "f4";
            show(elemId);
        }
    }
}

function show(elemId) {
    //已经确定当前格子不是雷，当前显示不是雷个数加1
    curNotMine++;
    //-2代表该方块不是雷
    minewarnArray[elemId] = -2;
    //是当前行的第几个，相当于x坐标(从0开始，原点是左上角)
    var x = elemId % set.width;
    //当前是第几行，相当于y坐标(从0开始)
    var y = Math.floor(elemId / set.width);
    var elemNum = 0;
    //当前点的上下九宫格
    point1: 
    for (var i = x - 1; i < x + 2; i++) {
        for (var j = y - 1; j < y + 2; j++) {
            if (i < 0) {
                continue point1
            }
            if (i > set.width - 1) {
                break point1
            }
            if (0 <= j && j <= set.height - 1) {
                var tempId = j * set.width + i;
                if (minewarnArray[tempId] == -1) {
                    if (mineArray.has(tempId)) {
                        elemNum++;
                    } else {
                        minewarnArray[tempId] = -2
                    }
                }
            }
        }
    }
    //n1、n2、n3: 目的是使不同数字显示不同颜色
    f(elemId).innerHTML = (elemNum == 0) ? "&nbsp;" : "<font class='n" + elemNum + "'>" + elemNum + "</font>";
    //使格子中的数字居中显示
    f(elemId).align = "center";
    //f4: 已点开的不是雷的格子
    f(elemId).className = "f4";
    minewarnArray[elemId] = elemNum;
    //判断是否胜利
    if (curNotMine == realNotMine) {
        for (var i = 0; i < mineArray.length; i++) {
            f(mineArray[i]).className = "f3"
        }
        //f("hintSpan").innerHTML = "成功过关，是否再来一次";
        //f("ohint").style.display = "block"
        gameOver = true;
        timing(false);
        alert("胜利");
    }
    if (elemNum == 0) {
        point2: 
        for (var i = x - 1; i <= x + 1; i++) {
            for (var j = y - 1; j <= y + 1; j++) {
                if (i < 0) {
                    continue point2
                }
                if (i > set.width - 1) {
                    break point2
                }
                if (0 <= j && j <= set.height - 1) {
                    var tempId = j * set.width + i;
                    if (minewarnArray[tempId] < 0) {
                        //递归
                        show(tempId);
                    }
                }
            }
        }
    }
}

//页面加载完成后执行此函数
window.onload = function () {
    var gTable = f("game");
    //鼠标右击时取消默认事件
    gTable.oncontextmenu = function () {
        return false;
    }
}